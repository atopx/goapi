#!/bin/bash

NAME=`grep 'app_name' conf/config.yaml | awk '{print $2}'`
VERSION=`grep 'app_version' conf/config.yaml | awk '{print $2}'`

function init() {
    NEW_NAME=$1
    sed -i "s/module $NAME/module $1/g" go.mod
    find . -type f -name '*.go' | xargs sed -i "s/$NAME\//$NEW_NAME\//g"
    find . -type f -name 'config*yaml' | xargs sed -i "s/$NAME/$NEW_NAME/g"
    echo -e "done. change module to \033[32m${NEW_NAME}\033[0m"
}

function build() {
	go build -tags=jsoniter -ldflags "-w -s" -o ${NAME}_${VERSION}
    echo -e "\033[32m build app to ${NAME}_${VERSION} \033[0m"
}

function docker() {
    docker build -t ${NAME}:${VERSION} .
    echo -e "\033[32m build docker image ${NAME}:${VERSION} \033[0m"
}

function docs() {
    swag init --output docs --outputTypes yaml --parseInternal
    rm -f docs/docs.go
    echo -e "\033[32m generate openapi to docs/swagger.yaml \033[0m"
}

function clean() {
    rm -f ${NAME}_*
    rm -f docs/swagger.yaml docs/docs.go
    echo -e "\033[32m delete ${NAME}_* and docs/swagger.yaml \033[0m"
}

case $1 in
    init)
    if [[ -z "$2" ]]; then
        echo -e "missing new name, example: $0 init NEW_NAME"
    else
        init $2
    fi;;
        
    build)
        build;;
    docker)
        docker;;
    docs)
        docs;;
    clean)
        clean;;
    *)
        echo -e $N $V
        echo -e "\033[34m Usage: $0 { init \$NEW_NAME | build | docker | docs | clean } \033[0m"
esac
